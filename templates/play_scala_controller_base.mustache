package {{main_package}}

import scala.language.existentials
import play.api.i18n.{I18nSupport, Messages}
import play.api.mvc._
import play.api.http._
import play.api.libs.json._
import de.zalando.play.controllers._
import Results.Status
import PlayBodyParsing._
import scala.concurrent.Future

import scala.util._
{{for import in imports}}
import {{import.name}}
{{/for}}
{{for import in binding_imports}}
import {{import.name}}
{{/for}}
{{if marshallers.data}}
{{else}}
{{if unmarshallers.data}}
{{else}}
import de.zalando.play.controllers.ResponseWriters
{{/if}}
{{/if}}

{{for controller in controllers}}
//noinspection ScalaStyle
trait {{controller.base}} extends Controller with PlayBodyParsing with I18nSupport with ValidationTranslator {{if controller.security_trait}} with {{controller.security_trait}} {{/if}}{
    import play.api.libs.concurrent.Execution.Implicits.defaultContext
    var currentRequest: Request[Any] = _
    {{for m in controller.methods}}
    sealed trait {{m.result_class_prefix}}Type[T] extends ResultWrapper[T]
    {{for result_type in m.full_result_types}}
    def {{m.result_class_prefix}}{{result_type.code}}(resultP: {{result_type.type}})(implicit writerP: String => Option[Writeable[{{result_type.type}}]]) = success(new {{m.result_class_prefix}}Type[{{result_type.type}}] { val statusCode = {{result_type.code}}; val result = resultP; val writer = writerP })
    def {{m.result_class_prefix}}{{result_type.code}}(resultF: Future[{{result_type.type}}])(implicit writerP: String => Option[Writeable[{{result_type.type}}]]) = resultF map { resultP => (new {{m.result_class_prefix}}Type[{{result_type.type}}] { val statusCode = {{result_type.code}}; val result = resultP; val writer = writerP }) }
    {{/for}}
    {{for result_type in m.empty_result_types}}
    def {{m.result_class_prefix}}{{result_type.code}}(headers: Seq[(String, String)] = Nil) = success(new EmptyReturn({{result_type.code}}, headers){})
    {{/for}}
    {{for mapping in m.error_mappings}}
    def {{m.result_class_prefix}}{{mapping.simple_exception_name}}(resultP: {{mapping.exception_name}})(implicit writerP: String => Option[Writeable[java.lang.Exception]]) = success(new {{m.result_class_prefix}}Type[{{mapping.exception_name}}] { val statusCode = {{mapping.exception_code}}; val result = resultP; val writer = writerP })
    def {{m.result_class_prefix}}{{mapping.simple_exception_name}}(resultF: Future[{{mapping.exception_name}}])(implicit writerP: String => Option[Writeable[java.lang.Exception]]) = resultF map { resultP => (new {{m.result_class_prefix}}Type[{{mapping.exception_name}}] { val statusCode = {{mapping.exception_code}}; val result = resultP; val writer = writerP }) }
    {{/for}}

    private type {{m.action_request_type}}       = ({{for v in m.validations}}{{for f in v.fields}}{{f.type_name}}{{if f.isNotLast}}, {{/if}}{{/for}}{{/for}}{{if m.has_no_validations}}Unit{{/if}})
    private type {{m.action_type}}[T]            = {{m.action_request_type}} => Future[{{m.result_class_prefix}}Type[T] forSome { type T }]



    {{for body in m.body_param}}
        {{if json_readables.data}}
        import BodyReads._
        {{else}}
        import MissingDefaultReads._
        {{/if}}
        val {{m.parser_name}} = parse.using { request =>
            request.contentType.map(_.toLowerCase(java.util.Locale.ENGLISH)) match {
                {{for content_type in m.default_content_types}}
                case Some("{{content_type.name}}") => {{content_type.parser}}.map(_.as{{if body.optional}}Opt{{/if}}[{{body.parser_type}}])
                {{/for}}
                {{for content_type in m.custom_content_types}}
                case Some("{{content_type.name}}") => anyParser[{{body.type_name}}](_ => "{{content_type.name}}", Nil, "")(request)
                {{/for}}
                case other => play.api.mvc.BodyParsers.parse.error(Future.successful(UnsupportedMediaType(s"Invalid content type specified $other")))
            }
        }
    {{/for}}

    val {{m.action_constructor}}  = {{if m.needs_security}}{{if m.security_instance}}new {{/if}}{{m.secure_action}}{{for check in m.security_checks}}{{if check.params}}({{for param in check.params}}{{param.name}}{{if param.isNotLast}}, {{/if}}{{/for}}){{/if}}{{/for}}{{else}}Action{{/if}}

def {{m.action}}[T] = (f: {{m.action_type}}[T]) =>{{if m.non_body_params}} ({{/if}}{{for p in m.non_body_params}}{{p.field_name}}: {{p.type_name}}{{if p.isNotLast}}, {{/if}}{{/for}}{{if m.non_body_params}}) =>{{/if}} {{m.action_constructor}}.async{{if m.body_param}}({{m.parser_name}}){{/if}} { implicit request: Request[{{if m.body_param}}{{for p in m.body_param}}{{p.type_name}}{{/for}}{{else}}AnyContent{{/if}}] =>

        currentRequest = request

        def {{m.process_valid_request}}({{for v in m.validations}}{{for f in v.fields}}{{f.field_name}}: {{f.type_name}}{{if f.isNotLast}}, {{/if}}{{/for}}{{/for}}): Either[Result, Future[{{m.result_class_prefix}}Type[_]]] = {
          lazy val apiFirstTempResultHolder = {{if m.has_no_validations}}Right(f(())){{else}}{{for v in m.validations}}Right(f(({{for f in v.fields}}{{f.field_name}}{{if f.isNotLast}}, {{/if}}{{/for}}))){{/for}}{{/if}}
            {{if m.has_no_validations}}apiFirstTempResultHolder{{else}}
            {{for v in m.validations}}new {{v.validation_name}}({{for f in v.fields}}{{f.field_name}}{{if f.isNotLast}}, {{/if}}{{/for}}).errors match {
                case e if e.isEmpty =>
                    apiFirstTempResultHolder
                case parsingErrors: Seq[ParsingError] =>
                    import ResponseWriters.jsonTranslatedParsingErrorsContainerWrites
                    Left(BadRequest(Json.toJson(translateParsingErrors(parsingErrors))))
            }
            {{/for}}
          {{/if}}
        }

        {{for body in m.body_param}}
            val {{body.field_name}}: {{body.type_name}} = request.body
            {{/for}}
            {{for header in m.header_params}}
            val {{header.field_name}}: Either[String,{{header.type_name}}] = fromParameters{{if header.optional}}Optional{{/if}}[{{header.type_name}}]("header")("{{header.real_name}}", request.headers.toMap{{if header.default}}, {{header.default}}{{/if}})
            {{/for}}
            {{if m.form_parameters}}
            val eitherFormParameters = FormDataParser.{{m.form_parser_name}}(request)
            eitherFormParameters match {
                case Left(problem: Seq[String]) =>
                    val providedTypes = Seq[String]()
                    val result = negotiateContent(request.acceptedTypes, providedTypes) map { {{m.response_mime_type_name}} =>
                        val msg = problem.mkString("\n")
                        implicit val marshaller: Writeable[String] = anyToWritable({{m.response_mime_type_name}})
                        success(BadRequest(msg))
                    }
                    result.getOrElse(success(Results.NotAcceptable))

                case Right(({{for param in m.form_parameters}}{{param.field_name}}{{if param.isNotLast}}, {{/if}}{{/for}})) =>
            {{/if}}
            {{if m.header_params}}
                ({{for header in m.header_params}}{{header.field_name}}{{if header.isNotLast}}, {{/if}}{{/for}}) match {
                    case ({{for header in m.header_params}}Right({{header.field_name}}){{if header.isNotLast}}, {{/if}}{{/for}}) =>
            {{/if}}

            {{m.process_valid_request}}({{for v in m.validations}}{{for f in v.fields}}{{f.field_name}}{{if f.isNotLast}}, {{/if}}{{/for}}{{/for}}) match {
                case Left(l) => success(l)
                case Right(r: Future[{{m.result_class_prefix}}Type[_] @unchecked]) =>
                    val providedTypes = {{m.produces}}
                    val result = negotiateContent(request.acceptedTypes, providedTypes) map { {{m.response_mime_type_name}} =>
                        {{if json_writables.data}}
                        import ResponseWrites._
                        {{else}}
                        import MissingDefaultWrites._
                        {{/if}}
                        r.map(_.toResult({{m.response_mime_type_name}}).getOrElse(Results.NotAcceptable))
                    }
                    result getOrElse notAcceptable
            }
            {{if m.header_params}}
                case ({{for h in m.header_params}}_{{if h.isNotLast}}, {{/if}}{{/for}}) =>
                    val problem: Seq[String] = Seq({{for h in m.header_params}}{{h.field_name}}{{if h.isNotLast}}, {{/if}}{{/for}}).filter{_.isLeft}.map(_.left.get)
                    val msg = problem.mkString("\n")
                    success(BadRequest(msg))
                }
            {{/if}}
            {{if m.form_parameters}}
            }
        {{/if}}
    }

    {{/for}}
    abstract class EmptyReturn(override val statusCode: Int, headers: Seq[(String, String)]) extends ResultWrapper[Result] {{for m in controller.methods}} with {{m.result_class_prefix}}Type[Result]{{/for}} { val result = Results.Status(statusCode).withHeaders(headers:_*); val writer = (x: String) => Some(new Writeable((_:Any) => emptyByteString, None)); override def toResult(mimeType: String): Option[play.api.mvc.Result] = Some(result) }
    case object NotImplementedYetSync extends ResultWrapper[Results.EmptyContent] {{for m in controller.methods}} with {{m.result_class_prefix}}Type[Results.EmptyContent]{{/for}} { val statusCode = 501; val result = Results.EmptyContent(); val writer = (x: String) => Some(new DefaultWriteables{}.writeableOf_EmptyContent); override def toResult(mimeType: String): Option[play.api.mvc.Result] = Some(Results.NotImplemented) }
    lazy val NotImplementedYet = Future.successful(NotImplementedYetSync)
}
{{/for}}
